<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>MonashTechTitans</title>
   
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
    <!-- Google Fonts Roboto -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap"/>
    <!-- MDB -->
	<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.2.0/mdb.min.css" rel="stylesheet" />
    <!-- Bootstrap Datatables-->
	<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.css" />
   
    <link rel="shortcut icon" type="image/jpg" href="/images/favicon.jpg"/> 

    <script src="https://d3js.org/d3.v6.js"></script> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/5.1.5/turf.min.js"></script><!--turf for d2 winding order-->
    <!--<script src="https://d3js.org/d3.v4.min.js"></script> -->
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="./javascripts/control.js"></script>
    <script type="text/javascript">
        
        // all data from the database
        let survey_data = <%-JSON.stringify(ejs_survey_list)%>;
        let states_geojson = JSON.parse(<%-JSON.stringify(ejs_states)%>);
        let phn_geojson = JSON.parse(<%-JSON.stringify(ejs_phn_geojson)%>);

        // global units
        let vhu;
        let vwu;

        // global vars
        let surveys = [];
        let color;
        let domain;
        let COLOUR_SCHEME = d3.interpolateBuGn;
        let legend_axis;
        let legendScale;

        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {
            
           // log data
           console.log(survey_data);
           console.log(states_geojson);
           console.log(phn_geojson);

           // global units
           vhu = window.innerHeight/100;
           vwu = window.innerWidth/100;
           console.log("height and width window units");
           console.log(vhu);
           console.log(vwu);

           // radio events
           document.getElementById('collapseDiv').addEventListener("click", handleSurveys)
            
          // get surveys
          let all_surveys = [];
          for(let i in survey_data){
            all_surveys.push(survey_data[i]["survey_desc"])
          }

          // set unique
          surveys = [...new Set(all_surveys)];
          

          // log survey data index 1 ,2, 5, 6, 7  (4 and 2016)
          for(let i in surveys){
            console.log(surveys[i]);
            console.log(get_survey(surveys[i], 2017));
          }

          // draw choropleth map
          let display_survey = get_survey(surveys[1], 2017);
          draw_map("mapDiv", display_survey);

          // show and init controls
          dragElement(document.getElementById("controls"));
          document.getElementById("controls").style.visibility = "visible";


        }, false);

        // update from controls
        function handleSurveys(event){
            
            let parent = event.target.parentNode;
            if(parent.getAttribute('name') == 'surveys'){

                // get new survey
                let survey_index = parseInt(parent.getAttribute('data-index'));
                let display_survey = get_survey(surveys[survey_index], 2017);

                // create look up map
                var survey_map = new Map(Array.from(display_survey, d => [d.PHN_code, d]));

                // extent of values
                var all_values = d3.map(display_survey, d => d.per_cent);
                all_values = removeItemAll(all_values, 0); // remove 0s

                // color scale https://observablehq.com/@d3/color-schemes
                domain = d3.extent(all_values);
                color = d3.scaleSequential(domain,COLOUR_SCHEME); 

                // HERE
                // add data
                // dark light theme
                // colour theme
                // How does it work
                // datatables
                
                // update legend
                legendScale.domain(color.domain());
                d3.select("#legendAxis").transition().duration(1000).call(legend_axis);

                // update map
                d3.selectAll('.maparea').transition().duration(1000)
                .attr("fill", function(d){
                    return color(survey_map.get(d.properties.FIRST_PHN_)['per_cent']);
                })
                

            }
        }

        // get individual survey data (only 5 have correct format, no errors)
        function get_survey(desc, year){

            // set controls header 
            let buttonHTML = '<button class="btn btn-dark" type="button" data-mdb-toggle="collapse" data-mdb-target="#collapseDiv" aria-expanded="false" aria-controls="collapseDiv">' +
                    '<i class="fas fa-bars" style="cursor:pointer;"></i></button>'
            let display_title = "<i class='fas fa-heart-pulse' style='color:salmon'></i><br>" + 
            desc + "<br>" + buttonHTML;
            document.getElementById("controlsheader").innerHTML = display_title;
            
            // get survey data
            let results = [];
            for(let i in survey_data){
                if(survey_data[i]["survey_desc"] == desc && survey_data[i]["year"] == year){
                    if(survey_data[i]["PHN_code"] !== "National"){
                        results.push(survey_data[i]);
                    }
                    else{
                        // set national average in controls
                        let aveString = "The national average is <strong>" + survey_data[i]["per_cent"] + "</strong>";             
                        document.getElementById("natAverage").innerHTML = aveString;
                    }
                }
            }
            return results;
        }

        

        function draw_map(div, survey){
            // get width and height of plot area
            var plot_area = document.getElementById(div);
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // plot dimensions
            //console.log(plot_area.offsetHeight);
            //console.log(plot_area.offsetWidth);

            // set the dimensions and margins of the plot 
            var margin = {top: 0, 
                        right: 0, 
                        bottom: 0, 
                        left: 0};

            // chart width and height (leaving names from old code)
            var width = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // zoom
            function zoomed(event) {
                const {transform} = event;
                svg.attr("transform", transform);
                //svg.attr("stroke-width", 1 / transform.k);
            }

            let zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .on('zoom', zoomed);

            // append the svg object to the plot area
            var svg = d3.select("#"+div)
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
                .attr("viewBox", [0, 0, plot_width, plot_height]) // add zoom here to avoid pan jitter
                .attr("style", "width: 100%; height: auto; height: intrinsic;").call(zoom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + 10*vwu + "," + margin.top + ")");

            // light filter
            //** spec lighting filter **//
            var lightFilterSVG = svg.
            append("filter")
            .attr("id", "specular")
            .attr("primitiveUnits", "objectBoundingBox");

            var feSpecFilterSVG = lightFilterSVG
            .append("feSpecularLighting")
            .attr("result", "specOut")
            .attr("in", "SourceGraphic")
            .attr("lighting-color", "white")
            .attr("surfaceScale", "1")
            .attr("specularExponent", "30")
            .attr("specularConstant", "0.4");


            feSpecFilterSVG
            .append("fePointLight")
            .attr("x", "0.25")
            .attr("y", "0.25")
            .attr("z", "0.3");

            lightFilterSVG
            .append("feComposite")
            .attr("in", "SourceGraphic")
            .attr("in2", "specOut")
            .attr("operator", "arithmetic")
            .attr("k1", "0")
            .attr("k2", "1")
            .attr("k3", "1")
            .attr("k4", "0");

            // create look up map
            var survey_map = new Map(Array.from(survey, d => [d.PHN_code, d]));

            // extent of values
            var all_values = d3.map(survey, d => d.per_cent);
            all_values = removeItemAll(all_values, 0); // remove 0s
            
            // color scale https://observablehq.com/@d3/color-schemes
            domain = d3.extent(all_values);
            color = d3.scaleSequential(domain,COLOUR_SCHEME);

            /*** unwind geojson using turf for d3  ***/ 
            var phn_features = phn_geojson.features;
            var fixed_phn = phn_features.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            })

            var state_features = states_geojson.features;
            var fixed_state = state_features.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            })

            // Map and projection
            const projection = d3.geoMercator(); 
            projection.fitSize([width,height],{"type": "FeatureCollection","features":fixed_phn})
            const path = d3.geoPath().projection(projection);

            // phn areas
           svg
            .append("g")
            .selectAll("path")
            .data(fixed_phn)
            .join("path")
            .attr("d", path)
            .attr("class", "maparea")
            .attr("fill", function(d){
                return color(survey_map.get(d.properties.FIRST_PHN_)['per_cent']);
            })
            .on("mousemove", function(event, d){

                // get tooltip
                var tooltip = d3.select("#tooltip");

                // create html FIRST_STE1
                var htmlString = "<strong>" +  d.properties.PHN_NAME + "</strong><br>" +
                                "<i>" +  d.properties.FIRST_STE1 + "</i><br>" +
                                "<i class='fas fa-heart-pulse' style='color:salmon'></i><br>"
                                +  survey_map.get(d.properties.FIRST_PHN_)['per_cent'] + "%"; 
                                
                               
                // set html and position
                tooltip.style('left', (event.pageX+10) + 'px');
                tooltip.style('top', (event.pageY-200) + 'px');
                tooltip.html(htmlString);
                tooltip.style("visibility", "visible");

                // highlight the area
                d3.selectAll('.maparea').attr("opacity", 0.1);
                d3.select(this).attr("opacity", 1);
                
                })
            .on("mouseout", function(event, d){
                var tooltip = d3.select("#tooltip");
                tooltip.style("visibility", "hidden");  
                d3.selectAll('.maparea').attr("opacity", 1);
            });

            
            // state boundaries
            svg
            .datum(fixed_state)
            .attr("d", path)
            .attr("stroke", "var(--mdb-white)")
            .attr("stroke-width", "1")
            .attr("stroke-opacity", 0.5);

            // add major cities
           svg
            .selectAll("circle")
            .data(cities)
            .enter()
            .append("circle")
            .attr("cx", d => projection(d.location)[0])
            .attr("cy", d => projection(d.location)[1])
            .attr("r", 5)
            .attr("filter", "url(#specular)")
            .attr("stroke", "white")
            .attr("fill", "var(--mdb-dark)")
            .attr("stroke-width", 2)
            .attr("stroke-opacity", 0.5);

            // add major city names with background
            // https://brettromero.com/d3-js-adding-a-colored-background-to-a-text-element/

            // get bounding box of text
            svg
            .selectAll("text")
            .data(cities)
            .enter()
            .append("text")
            .style("font-size", "0.9rem")
            .attr("text-anchor", "start")
            .attr("dx", 10)
            .text(d => d.city)
            .call(getBB);

            // Remove the text elements
            d3.selectAll("text").remove();

            // add rects
            const xMargin = 4
            const yMargin = 2
            svg
            .selectAll("rect")
            .data(cities)
            .enter()
            .append("rect")
            .attr("x", d => projection(d.location)[0] + 10)
            .attr("y", d => projection(d.location)[1])
            .attr("width", d => d.bbox.width + 2 * xMargin)
            .attr("height", d => d.bbox.height + 2 * yMargin)
            .style("fill", "var(--mdb-dark)")
            .style("fill-opacity", 0.5)
            .attr('transform', function(d) {
                return `translate(-${xMargin}, -${d.bbox.height * 0.8 + yMargin})`
                });

            // re add text
            svg
            .selectAll("text")
            .data(cities)
            .enter()
            .append("text")
            .attr("x", d => projection(d.location)[0])
            .attr("y", d => projection(d.location)[1])
            .attr("text-anchor", "start")
            .attr("dx", 10)
            .attr("fill", "var(--mdb-white)")
            .attr("stroke", "var(--mdb-white)")
            .style("text-shadow", "0.1vh 0.1vh gray")
            .style("font-size", "0.9rem")
            .text(d => d.city);
            
            // add legend
            draw_legend();
           
            // get bb of text
            function getBB(selection) {
                selection.each(function(d){d.bbox = this.getBBox();})
            }
            
        }

        function draw_legend(){
            // get width and height of plot area
            var plot_area = document.getElementById('legendDiv');
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // plot dimensions
            //console.log(plot_area.offsetHeight);
            //console.log(plot_area.offsetWidth);
            
            // set the dimensions and margins of the plot 
            var margin = {top: 20*vhu, 
                        right: 2*vwu, 
                        bottom: 20*vhu, 
                        left: 3*vwu};
            
            // chart width and height (leaving names from old code)
            var width = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // append the svg object to the plot area
            var svg = d3.select("#legendDiv")
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
                .attr("viewBox", [0, 0, plot_width, plot_height]) // add zoom here to avoid pan jitter
                .attr("style", "width: 100%; height: auto; height: intrinsic;")
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");


            // y scale
            legendScale = d3.scaleLinear()
                    .domain(color.domain()) // use color domain
                    .range([height, 0]);

            // y-axis
            legend_axis = d3.axisLeft().scale(legendScale)
                        .tickFormat(d => d + "%")
                        .tickSizeOuter(0);

            // create data range for legend
            var legend_range = legendScale.domain()[1] - legendScale.domain()[0];
            var step = legend_range/5000; // granularity of legend


            // interval and step
            var interval = legendScale.domain()[0] - step;
            var legend_data = [interval];
            
            // data
            var new_interval;
            while(interval <legendScale.domain()[1]){
                new_interval = interval + step;
                interval = parseFloat(new_interval.toFixed(4));
                legend_data.push(interval);
            }
            
            // reverse array and cals height
            legend_data.reverse();
            var rect_height = height/legend_data.length; 

            // back drop
            /*
            svg.append("rect")
            .attr("x", -3*vwu)
            .attr("y", 0)
            .attr("width", 3*vwu)
            .attr("height", height)
            .attr("fill", "gray")
            .attr("fill-opacity", 0.5);
            */

            // legend
            svg
            .selectAll("legend")
            .data(legend_data)
            .enter()
            .append("rect")
            .attr("x", 0)
            .attr("y",function(d,i){
                return i*rect_height;
            })
            .attr("width", 3*vwu)
            .attr("height", function(d,i){
               return rect_height;
            })
            .attr("fill", (d) => color(d));

            // add legend axis
            svg.append("g")
            .attr('class', 'axis-legend')
            .attr('id', 'legendAxis')
            .call(legend_axis)
            .style('font-size', '1.8vh');

        }

        // remove items from array
        function removeItemAll(arr, value) {
            var i = 0;
            while (i < arr.length) {
                if (arr[i] === value) {
                arr.splice(i, 1);
                } else {
                ++i;
                }
            }
            return arr;
        }


        
    </script>
</head>