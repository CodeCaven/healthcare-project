<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>MonashTechTitans</title>
    <!-- MDB icon -->
    <link rel="icon" href="img/mdb-favicon.ico" type="image/x-icon" />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
    <!-- Google Fonts Roboto -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap"/>
    <!-- MDB -->
	<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.2.0/mdb.min.css" rel="stylesheet" />
    <!-- Bootstrap Datatables-->
	<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.css" />
    

    <script src="https://d3js.org/d3.v6.js"></script> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/5.1.5/turf.min.js"></script><!--turf for d2 winding order-->
    <!--<script src="https://d3js.org/d3.v4.min.js"></script> -->
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="./javascripts/control.js"></script>
    <script type="text/javascript">
        
        // all data from the database
        let survey_data = <%-JSON.stringify(ejs_survey_list)%>;
        let states_geojson = JSON.parse(<%-JSON.stringify(ejs_states)%>);
        let phn_geojson = JSON.parse(<%-JSON.stringify(ejs_phn_geojson)%>);

        // global units
        let vhu;
        let vwu;

        // global vars
        let surveys = [];

        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {
            
           // log data
           console.log(survey_data);
           console.log(states_geojson);
           console.log(phn_geojson);

           // global units
           vhu = window.innerHeight/100;
           vwu = window.innerWidth/100;
           console.log("height and width window units");
           console.log(vhu);
           console.log(vwu);
            
          // get surveys
          let all_surveys = [];
          for(let i in survey_data){
            all_surveys.push(survey_data[i]["survey_desc"])
          }

          // set unique
          surveys = [...new Set(all_surveys)];
          

          // log survey data index 1 ,2, 5, 6, 7 9 (4 and 2016)
          for(let i in surveys){
            console.log(surveys[i]);
            console.log(get_survey(surveys[i], 2016));
          }

          // draw choropleth map
          draw_map("mapDiv", get_survey(surveys[1], 2017));

        }, false);

        // get individual survey data (only 5 have correct format, no errors)
        function get_survey(desc, year){
            let results = [];
            for(let i in survey_data){
                if(survey_data[i]["survey_desc"] == desc && survey_data[i]["year"] == year){
                    if(survey_data[i]["PHN_code"] !== "National"){
                        results.push(survey_data[i]);
                    }
                }
            }
            return results;
        }

        

        function draw_map(div, survey){
            // get width and height of plot area
            var plot_area = document.getElementById(div);
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // plot dimensions
            //console.log(plot_area.offsetHeight);
            //console.log(plot_area.offsetWidth);

            // set the dimensions and margins of the plot 
            var margin = {top: 0, 
                        right: 0, 
                        bottom: 0, 
                        left: 0};

            // chart width and height (leaving names from old code)
            var width = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // zoom
            function zoomed(event) {
                const {transform} = event;
                svg.attr("transform", transform);
                //svg.attr("stroke-width", 1 / transform.k);
            }

            let zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .on('zoom', zoomed);

            // append the svg object to the plot area
            var svg = d3.select("#"+div)
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
                .attr("viewBox", [0, 0, plot_width, plot_height]) // add zoom here to avoid pan jitter
                .attr("style", "width: 100%; height: auto; height: intrinsic;").call(zoom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + 10*vwu + "," + margin.top + ")");

            // create look up map
            var survey_map = new Map(Array.from(survey, d => [d.PHN_code, d]));

            // extent of values
            var all_values = d3.map(survey, d => d.per_cent);
            all_values = removeItemAll(all_values, 0); // remove 0s
            
            // color scale https://observablehq.com/@d3/color-schemes
            var color = d3.scaleSequential(d3.extent(all_values),d3.interpolateBlues);

            // unwind geojson using turf for d3        
            var phn_features = phn_geojson.features;
            var fixed_phn = phn_features.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            })

            var state_features = states_geojson.features;
            var fixed_state = state_features.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            })

            // Map and projection
            const projection = d3.geoMercator(); 
            projection.fitSize([width,height],{"type": "FeatureCollection","features":fixed_phn})
            const path = d3.geoPath().projection(projection);

            // phn areas
           svg
            .append("g")
            .selectAll("path")
            .data(fixed_phn)
            .join("path")
            .attr("d", path)
            .attr("class", "maparea")
            .attr("fill", function(d){
                return color(survey_map.get(d.properties.FIRST_PHN_)['per_cent']);
            })
            .on("mousemove", function(event, d){

                // get tooltip
                var tooltip = d3.select("#tooltip");

                // create html FIRST_STE1
                var htmlString = "<strong>" +  d.properties.PHN_NAME + "</strong><br>" +
                                "<i>" +  d.properties.FIRST_STE1 + "</i><br>" +
                                "<i class='fas fa-heart-pulse' style='color:salmon'></i><br>"
                                +  survey_map.get(d.properties.FIRST_PHN_)['per_cent'] + "%"; 
                                
                               
                // set html and position
                tooltip.style('left', (event.pageX+10) + 'px');
                tooltip.style('top', (event.pageY-100) + 'px');
                tooltip.html(htmlString);
                tooltip.style("visibility", "visible");
                
                })
            .on("mouseout", function(event, d){
                var tooltip = d3.select("#tooltip");
                tooltip.style("visibility", "hidden");  
            });

            
            // state boundaries
            svg
            .datum(fixed_state)
            .attr("d", path)
            .attr("stroke", "white")
            .attr("stroke-width", "1")
            .attr("stroke-opacity", 0.5);

        }

        // remove items from array
        function removeItemAll(arr, value) {
            var i = 0;
            while (i < arr.length) {
                if (arr[i] === value) {
                arr.splice(i, 1);
                } else {
                ++i;
                }
            }
            return arr;
        }


        
    </script>
</head>