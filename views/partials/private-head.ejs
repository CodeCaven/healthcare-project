<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>MonashTechTitans</title>
    <!-- MDB icon -->
    <link rel="icon" href="img/mdb-favicon.ico" type="image/x-icon" />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
    <!-- Google Fonts Roboto -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap"/>
    <!-- MDB -->
	<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.2.0/mdb.min.css" rel="stylesheet" />
    <!--<script src="https://d3js.org/d3.v6.js"></script> D3 v6-->
    <script src="https://d3js.org/d3.v4.min.js"></script> <!--D3 v4 for events-->
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="./javascripts/control.js"></script>
    <script type="text/javascript">
        
        // all data from the database
        let private_age = <%-JSON.stringify(ejs_age_list)%>;
        let private_care = <%-JSON.stringify(ejs_care_list)%>;
        let private_charge = <%-JSON.stringify(ejs_charge_list)%>;
        let private_cost = <%-JSON.stringify(ejs_cost_list)%>;
        let private_fund = <%-JSON.stringify(ejs_fund_list)%>;

        // global units
        let vhu;
        let vwu;
        
        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {
            
           // log data
           console.log(private_age);
           console.log(private_care);
           console.log(private_charge);
           console.log(private_cost);
           console.log(private_fund);

           // global units
           vhu = window.innerHeight/100;
           vwu = window.innerWidth/100;
           console.log("height and width window units");
           console.log(vhu);
           console.log(vwu);
           
           // plot graphs
           small_multiples("multiplesVis1", "ave_length_stay_days", "Average Stay (Days)");
           small_multiples("multiplesVis2", "average_hospital_charge_per_separation", "Average Charge");
           small_multiples("multiplesVis3", "number_of_hospitals_reporting", "Total Private Hospitals");
           small_multiples("multiplesVis4", "separations", "Total Patients");

           draw_stream_graph("usersStream", "users", private_age, "age_group");
           draw_stream_graph_charge("careStream", "charge", private_charge, "charge_component");

           // load tables
           var cost_table = document.getElementById('table-cost');
           for(let i in private_cost){
            // new row
             var table_row = document.createElement("tr");

            // entries
            var table_td_1 = document.createElement("td");
            table_td_1.innerHTML = private_cost[i]["ave_length_stay_days"];
            table_row.append(table_td_1);

            var table_td_2 = document.createElement("td");
            table_td_2.innerHTML = private_cost[i]["average_hospital_charge_per_separation"];
            table_row.append(table_td_2);

            var table_td_4 = document.createElement("td");
            table_td_4.innerHTML = private_cost[i]["number_of_hospitals_reporting"];
            table_row.append(table_td_4);

            var table_td_5 = document.createElement("td");
            table_td_5.innerHTML = private_cost[i]["separation_year"];
            table_row.append(table_td_5);

            var table_td_6 = document.createElement("td");
            table_td_6.innerHTML = private_cost[i]["separations"];
            table_row.append(table_td_6);

            var table_td_7 = document.createElement("td");
            table_td_7.innerHTML = private_cost[i]["separations_with_charge"];
            table_row.append(table_td_7);

            cost_table.append(table_row);
             
           }

        }, false);

        function small_multiples(div, attr, title){
           

            // get width and height of plot area
            var plot_area = document.getElementById(div);
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // plot dimensions
            //console.log(plot_area.offsetHeight);
            //console.log(plot_area.offsetWidth);

            // set the dimensions and margins of the plot 
            var margin = {top: 3*vhu, 
                        right: 3*vwu, 
                        bottom: 4*vhu, 
                        left: 3*vwu};

            // chart width and height (leaving names from old code)
            var lineChartWidth = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // append the svg object to the plot area
            var svg = d3.select("#"+div)
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // background
            svg.
            append("rect")
                .attr("id", "backLine")
                .attr("width", lineChartWidth)
                .attr("height", height)
                .attr("fill", "white")
                .attr("x",0)
                .attr("y",0);

            // define a clipPath: everything out of this area won't be drawn (else draws in margin)
            svg.append("defs").append("svg:clipPath")
                .attr("id", attr) 
                .append("svg:rect")
                .attr("width", lineChartWidth)
                .attr("height", height)
                .attr("x",0)
                .attr("y",0);

            // add the clip path
            var all_streams = svg.append('g')
                .attr("clip-path", "url(#" + attr + ")");

            //Read the data
            var x_values = [];
            var y_values = [];
            var d3_data = [];
            for(let i in private_cost){
                x_values.push(private_cost[i]["separation_year"]);
                y_values.push(private_cost[i][attr]);
                d3_data.push({'x':private_cost[i]["separation_year"], 'y':private_cost[i][attr]});
            }

            // y-scale
            var yScale = d3.scaleLinear()
            .domain([0, 2*d3.max(y_values)])
            .range([height, 0]);

            // x-scale
            var xScale = d3.scaleLinear()
            .domain([d3.min(x_values), d3.max(x_values)])
            .range([0, lineChartWidth]);

            // area under curve
            var area = d3.area().curve(d3.curveMonotoneX)
                    .x(function(d) {return xScale(d.x);})
                    .y0(height)
                    .y1(function(d) { return yScale(d.y);});

            // gradient fill
            var gradFill = svg
            .append('defs')
            .append('linearGradient')
            .attr('id', 'chromFill')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '0%')
            .attr('y2', '100%')


            gradFill.append('stop')
            .attr('offset', '0%')
            .style('stop-color', 'var(--mdb-info)')
            .style('stop-opacity', 1);

            gradFill.append('stop')
            .attr('offset', '50%')
            .style('stop-color', 'var(--mdb-info)')
            .style('stop-opacity', 1);

            gradFill.append('stop')
            .attr('offset', '100%')
            .style('stop-color', 'whitesmoke')
            .style('stop-opacity', 1);

            // x-axis 
            var x_axis = d3.axisBottom().scale(xScale)
                .tickSize(vhu/2).ticks(5).tickSizeOuter(0).tickFormat(d => d);

            // grid x 
            var xAxisGrid = d3.axisBottom().scale(xScale)
            .tickSize(-height).tickFormat('').ticks(5).tickSizeOuter(0);

            // grid call x
            var x_axis_grid_call = svg.append("g")
            .attr('class', 'axis-grid')
            .attr('transform', 'translate(0,' + height + ')')
            .call(xAxisGrid);

            // y-axis
            var y_axis = d3.axisLeft().ticks(5).scale(yScale)
            .tickSize(vhu/2).tickSizeOuter(0).tickFormat(d => d);

            // grid y
            var yAxisGrid = d3.axisLeft().scale(yScale).
            tickSize(-lineChartWidth).tickFormat('').ticks(5).tickSizeOuter(0);

            // grid y call
            svg.append("g")
            .attr('class', 'axis-grid')
            .call(yAxisGrid);

            // title
            svg.append("text")
                .attr("class", "label")
                .attr("text-anchor", "middle")
                .attr("fill", 'var(--mdb-dark)')
                .attr("stroke", 'var(--mdb-dark)')
                .attr("x", lineChartWidth / 2)
                .attr("y", -vhu)
                .text(title);

            // xlabel
            svg.append("text")
                .attr("class", "label")
                .attr("text-anchor", "middle")
                .attr("fill", 'var(--mdb-dark)')
                .attr("stroke", 'var(--mdb-dark)')
                .attr("x", lineChartWidth / 2)
                .attr("y", height + margin.bottom)
                .text("YEAR");

            // plot the density distribution (area)
            svg.append("path")
                .datum(d3_data)
                .attr("fill", "url(#chromFill)") //url(#chromFill)
                .attr("fill-opacity", 1)
                .attr("stroke-width", "0.3vh")
                .attr("stroke", 'var(--mdb-info)') 
                .attr("stroke-opacity", 0.5)
                .attr("class", "lineArea")
                .attr("d", area)
                .on("mousemove", function(d){

                    // get tooltip
                    var tooltip = d3.select("#tooltip");
                    
                    // get year from mouse
                    var mouse = d3.mouse(this);
                    var key_date = Math.ceil(xScale.invert(mouse[0]));

                    
                    // find y value
                    var y_value = 0;
                    for(let i in d){
                        if(d[i].x == key_date){
                            y_value = d[i].y;
                        }
                    }

                    // create html
                    var htmlString = "<strong>" +  title + "</strong><br>"
                                    + "YEAR " + key_date + "<br>" + 
                                    "<i class='fas fa-heart-pulse' style='color:salmon'></i><br>" +
                                    "<strong>" +  y_value + "</strong><br>";
                                    
                    // create html
                    var htmlStringCharge = "<strong>" +  title + "</strong><br>"
                                    + "YEAR " + key_date + "<br>" + 
                                    "<i class='fas fa-heart-pulse' style='color:salmon'></i><br>" +
                                    "<strong>$" +  Math.ceil(y_value) + "</strong><br>";
                    
                    // set html and position
                    var toolX = mouse[0] + 'px';
                    tooltip.style('left', (d3.event.pageX+10) + 'px');
                    tooltip.style('top', (d3.event.pageY-100) + 'px');
                    tooltip.html(htmlString);
                    if(title == "Average Charge"){
                        tooltip.html(htmlStringCharge);
                    }
                    tooltip.style("visibility", "visible");

                    
                })
                .on("mouseout", function(event, d){
                        var tooltip = d3.select("#tooltip");
                        tooltip.style("visibility", "hidden");  
                });

            // y-axis calls
            svg.append("g")
                .call(y_axis)
                //.style('stroke-width', '0.4vh')
                .style('font-size', '1.2vh')
                .attr('class', 'axis-light');

            // x-axis call 
            svg.append("g")
                .attr("transform", "translate(0," + (height) + ")") 
                .call(x_axis)
                //.style('stroke-width', '0.4vh')
                .style('font-size', '1.5vh')
                .attr('class', 'axis-light');

        }

    
    function draw_stream_graph(div, streamType, private_data, attr){

        // get width and height of plot area
        var plot_area = document.getElementById(div);
        var plot_height = plot_area.offsetHeight;
        var plot_width = plot_area.offsetWidth;

        console.log(plot_area);
        console.log(plot_area.offsetHeight);
        console.log(plot_area.offsetWidth);

         // set the dimensions and margins of the plot 
         var margin = {top: 3*vhu, 
                        right: 3*vwu, 
                        bottom: 4*vhu, 
                        left: 6*vwu};

        // chart width and height (leaving names from old code)
        var lineChartWidth = plot_width - margin.left - margin.right;
        var height = plot_height - margin.top - margin.bottom;

        // remove any elements in plot area
        while (plot_area.firstChild) {
            plot_area.removeChild(plot_area.firstChild);
        }

        // append the svg object to the plot area
        var svg = d3.select("#"+div)
        .append("svg")
            .attr("width", plot_width)
            .attr("height", plot_height)
        .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // background
        svg.
        append("rect")
            .attr("id", "backLine")
            .attr("width", lineChartWidth)
            .attr("height", height)
            .attr("fill", "white")
            .attr("x",0)
            .attr("y",0);

        // define a clipPath: everything out of this area won't be drawn (else draws in margin)
        svg.append("defs").append("svg:clipPath")
            .attr("id", streamType) 
            .append("svg:rect")
            .attr("width", lineChartWidth)
            .attr("height", height)
            .attr("x",0)
            .attr("y",0);

        // add the clip path
        var all_streams = svg.append('g')
            .attr("clip-path", "url(#" +  streamType + ")");
        

        // data and keys
        var allKeys = [];
        var d3_data = [];
        var filter_attr = ["Total", "95 and over", "Not reported"];

        var new_row = {"date":private_data[0]["separation_year"]};
        for(let i in private_data){
            if(private_data[i]['hospital_type'] == "Private - Total"){
                var category = private_data[i][attr];
                if(!(filter_attr.includes(category))){
                    if(category == '0'){
                        category = '< 1';
                    }

                    if(new_row["date"] == private_data[i]["separation_year"]){
                        new_row[category] = private_data[i]["patient_days"];
                        allKeys.push(category);
                    }
                    else{
                        d3_data.push(new_row);
                        new_row = {"date":private_data[i]["separation_year"]};
                        new_row[category] = private_data[i]["patient_days"];
                    }
                }
            }
        }

        // stackKeys
        let stackKeys = [...new Set(allKeys)];
        console.log(stackKeys);
        console.log(d3_data);

        // x scale
        const xScale = d3.scaleLinear()
            .domain([2010, 2020])
            .range([ 0, lineChartWidth]);

        
        var yScale = d3.scaleLinear()
            .domain([0, 10000000]) 
            .range([height, 0]);
        
        
        // HERE: keys length and colour schemes by key lengths (11 and 14)

        // color palettes by chatgpt!!!!
        var lightColors = ["#FADADD", "#F5D5E3", "#E8D8C3", "#D5ECC2", "#BEE3F8", "#C3C9E9", "#B1D4E0", "#FAD6A5", "#F7D6CF", "#EAE0C8", "#D6D2B6", "#CFE5C5", "#D1B2F2"];
        var brightColors = ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#FF6F61", "#6B5B95", "#88D8B0", "#E27D60", "#41B3A3", "#FAC863", "#D9AFD9"];
        var categoryColors = ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#F012BE", "#39CCCC", "#01FF70", "#85144b", "#3D9970", "#7FDBFF", "#F012BE"];
        var categoryColors2 = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf", "#ffbb78", "#98df8a", "#aec7e8"];
        // blues ["#0074D9", "#3D85C6", "#4A90E2", "#2B9EB3", "#00BFFF", "#1E90FF", "#6495ED"]
        // categories1 ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#F012BE"]
        // yellowsreds ["#FFD700", "#FFFF00", "#FF6347", "#FF7F50", "#FFC300", "#FFA500", "#DC143C"]
        // pastels ["#FFB6C1", "#87CEEB", "#B0E0E6", "#98FB98", "#FFDAB9", "#FFC0CB", "#DDA0DD"]


        const colour = d3.scaleOrdinal()
            .domain(stackKeys) // chatgpt color scheme!
            .range(categoryColors2);

        // create stacked areas
        var stackedData = d3.stack()
        .offset(d3.stackOffsetNone)
        .order(d3.stackOrderDescending)
        .keys(stackKeys);

        var stack = stackedData(d3_data);
        console.log(stack);

        var area = d3.area().curve(d3.curveMonotoneX) //d3.curveBasis
                .x(function(d) { return xScale(d.data.date);})
                .y0(function(d) { return yScale(d[0]);})
                .y1(function(d) { return yScale(d[1]);});

        // plot the streams
        all_streams
        .selectAll("layers"+attr)
        .data(stack)
        .enter()
        .append("path")
        .attr("class", "streams"+attr)
        .style("fill", function(d) { return colour(d.key); })
        .style("fill-opacity", 0.5)
        .style("stroke", function(d) { return colour(d.key); })
        .style("stroke-opacity", 0.8)
        .style("stroke-width", 0.5)
        .style("cursor", "pointer")
        .on("mouseover", function(d){
           
            var htmlString = d.key + "<br><i class='fas fa-heart-pulse' style='color:salmon'></i>" 
                                    + "<br> Age group";
            // get tooltip
            var tooltip = d3.select("#tooltip");
            tooltip.style('width' ,'100px');
            tooltip.style('left', (d3.event.pageX+10) + 'px');
            tooltip.style('top', (d3.event.pageY-100) + 'px');
            tooltip.html(htmlString);
            tooltip.style("visibility", "visible");
            

            // highlight
            d3.selectAll(".streams"+attr).style("opacity", function(e){
                if(e.key == d.key){return 1;}
                return 0.1;
            });
            
        })
        .on("mouseout", function(event, d){
            d3.selectAll(".streams"+attr).style("opacity", 1);

            var tooltip = d3.select("#tooltip");
            tooltip.style('width' ,'200px');
            tooltip.style("visibility", "hidden");  
        })
        .attr("d", area);

        // x-axis
        var x_axis = d3.axisBottom().scale(xScale)
            .tickSize(10)
            .ticks(6)
            .tickFormat(d => d)
            .tickSizeOuter(0);

        // x-axis append (bottom)
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .style('font-size', '1.5vh')
            .attr('class', 'axis-light')
            .call(x_axis);

        // y-axis
        svg.append("g")
        .style('font-size', '1.2vh')
        .attr('class', 'axis-light')
        .call(d3.axisLeft(yScale));

        // ylabel
        svg.append("text")
            .attr("transform", "rotate(-90)")
            .attr("class", "label")
            .attr("y", 0 - margin.left)
            .attr("x",0 - (height / 2))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Patient Days");
        
    }

    function draw_stream_graph_charge(div, streamType, private_data, attr){

            // get width and height of plot area
            var plot_area = document.getElementById(div);
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            console.log(plot_area);
            console.log(plot_area.offsetHeight);
            console.log(plot_area.offsetWidth);

            // set the dimensions and margins of the plot 
            var margin = {top: 3*vhu, 
                            right: 3*vwu, 
                            bottom: 4*vhu, 
                            left: 6*vwu};

            // chart width and height (leaving names from old code)
            var lineChartWidth = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // append the svg object to the plot area
            var svg = d3.select("#"+div)
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // background
            svg.
            append("rect")
                .attr("id", "backLine")
                .attr("width", lineChartWidth)
                .attr("height", height)
                .attr("fill", "white")
                .attr("x",0)
                .attr("y",0);

            // define a clipPath: everything out of this area won't be drawn (else draws in margin)
            svg.append("defs").append("svg:clipPath")
                .attr("id", streamType) 
                .append("svg:rect")
                .attr("width", lineChartWidth)
                .attr("height", height)
                .attr("x",0)
                .attr("y",0);

            // add the clip path
            var all_streams = svg.append('g')
                .attr("clip-path", "url(#" +  streamType + ")");


            // data and keys
            var allKeys = [];
            var d3_data = [];
            var filter_attr = ["Total", "95 and over", "Not reported"];

            var new_row = {"date":private_data[0]["separation_year"]};
            for(let i in private_data){
                if(private_data[i]['hospital_type'] == "Private - Other"){
                    var category = private_data[i][attr];
                    if(!(filter_attr.includes(category))){
                        if(category == '0'){
                            category = '< 1';
                        }

                        if(new_row["date"] == private_data[i]["separation_year"]){
                            new_row[category] = private_data[i]["separations_with_charge_reported"];
                            allKeys.push(category);
                        }
                        else{
                            d3_data.push(new_row);
                            new_row = {"date":private_data[i]["separation_year"]};
                            new_row[category] = private_data[i]["separations_with_charge_reported"];
                        }
                    }
                }
            }

            // stackKeys
            let stackKeys = [...new Set(allKeys)];
            console.log(stackKeys);
            console.log(d3_data);

            // x scale
            const xScale = d3.scaleLinear()
                .domain([2010, 2020])
                .range([ 0, lineChartWidth]);


            var yScale = d3.scaleLinear()
                .domain([0, 7000000]) 
                .range([height, 0]);


            // HERE: keys length and colour schemes by key lengths (11 and 14)

            // color palettes by chatgpt!!!!
            var lightColors = ["#FADADD", "#F5D5E3", "#E8D8C3", "#D5ECC2", "#BEE3F8", "#C3C9E9", "#B1D4E0", "#FAD6A5", "#F7D6CF", "#EAE0C8", "#D6D2B6", "#CFE5C5", "#D1B2F2"];
            var brightColors = ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#FF6F61", "#6B5B95", "#88D8B0", "#E27D60", "#41B3A3", "#FAC863", "#D9AFD9"];
            var categoryColors = ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#F012BE", "#39CCCC", "#01FF70", "#85144b", "#3D9970", "#7FDBFF", "#F012BE"];
            var categoryColors2 = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf", "#ffbb78", "#98df8a", "#aec7e8"];
            // blues ["#0074D9", "#3D85C6", "#4A90E2", "#2B9EB3", "#00BFFF", "#1E90FF", "#6495ED"]
            // categories1 ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#F012BE"]
            // yellowsreds ["#FFD700", "#FFFF00", "#FF6347", "#FF7F50", "#FFC300", "#FFA500", "#DC143C"]
            // pastels ["#FFB6C1", "#87CEEB", "#B0E0E6", "#98FB98", "#FFDAB9", "#FFC0CB", "#DDA0DD"]


            const colour = d3.scaleOrdinal()
                .domain(stackKeys) // chatgpt color scheme!
                .range(brightColors);

            // create stacked areas
            var stackedData = d3.stack()
            .offset(d3.stackOffsetNone)
            .order(d3.stackOrderDescending)
            .keys(stackKeys);

            var stack = stackedData(d3_data);
            console.log(stack);

            var area = d3.area().curve(d3.curveMonotoneX) //d3.curveBasis
                    .x(function(d) { return xScale(d.data.date);})
                    .y0(function(d) { return yScale(d[0]);})
                    .y1(function(d) { return yScale(d[1]);});

            // plot the streams
            all_streams
            .selectAll("layers"+attr)
            .data(stack)
            .enter()
            .append("path")
            .attr("class", "streams"+attr)
            .style("fill", function(d) { return colour(d.key); })
            .style("fill-opacity", 0.5)
            .style("stroke", function(d) { return colour(d.key); })
            .style("stroke-opacity", 0.8)
            .style("stroke-width", 0.5)
            .style("cursor", "pointer")
            .on("mouseover", function(d){
            
                var htmlString = d.key + "<br><i class='fas fa-heart-pulse' style='color:salmon'></i>" 
                                        + "<br> Charge Type";
                // get tooltip
                var tooltip = d3.select("#tooltip");
                tooltip.style('width' ,'150px');
                tooltip.style('left', (d3.event.pageX+10) + 'px');
                tooltip.style('top', (d3.event.pageY-100) + 'px');
                tooltip.html(htmlString);
                tooltip.style("visibility", "visible");
                

                // highlight
                d3.selectAll(".streams"+attr).style("opacity", function(e){
                    if(e.key == d.key){return 1;}
                    return 0.1;
                });
                
            })
            .on("mouseout", function(event, d){
                d3.selectAll(".streams"+attr).style("opacity", 1);

                var tooltip = d3.select("#tooltip");
                tooltip.style('width' ,'200px');
                tooltip.style("visibility", "hidden");  
            })
            .attr("d", area);

            // x-axis
            var x_axis = d3.axisBottom().scale(xScale)
                .tickSize(10)
                .ticks(6)
                .tickFormat(d => d)
                .tickSizeOuter(0);

            // x-axis append (bottom)
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .style('font-size', '1.5vh')
                .attr('class', 'axis-light')
                .call(x_axis);

            // y-axis
            svg.append("g")
            .style('font-size', '1.2vh')
            .attr('class', 'axis-light')
            .call(d3.axisLeft(yScale));

            // ylabel
            svg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("class", "label")
                .attr("y", 0 - margin.left)
                .attr("x",0 - (height / 2))
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .text("Admissions");

    }

        
    </script>
</head>