<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>MonashTechTitans</title>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
    <!-- Google Fonts Roboto -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap"/>
    <!-- MDB -->
	<link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.2.0/mdb.min.css" rel="stylesheet" />
    <link rel="shortcut icon" type="image/jpg" href="/images/favicon.jpg"/> 
    <script src="https://d3js.org/d3.v6.js"></script> <!--D3-->
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/themes/translucent.css"/>
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css"/>
    <script src="./javascripts/control.js"></script>
    <script src="./javascripts/iteration-3-data-graph.js"></script>
    <script type="text/javascript">

        // global graph vars
        let toolTip;
        
        
        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {
            
            console.log("DOM ready");
            console.log(healthTree);

            draw_tree();

            // initialise tree tooltips (an array)
            toolTip = tippy('.nodeinternal', {
                content: "No content",
                //theme: 'translucent',
                placement: 'right-start',
                animation: 'scale',
                allowHTML: true
               
            });

            // initialise tree tooltips (an array)
            toolTipLeaf = tippy('.leaf', {
                content: "No content",
                //theme: 'translucent',
                placement: 'right-start',
                animation: 'scale',
                allowHTML: true
               
            });
            

        }, false);

        function draw_tree(){
            // get width and height of plot area
            var plot_area = document.getElementById("plot_tree");
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // set the dimensions and margins of the graph
            var margin = {top: 50, right: 170, bottom: 210, left: 5};
            width = plot_width - margin.left - margin.right;
            height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // Declares a tree layout and assigns the size
            
            const treemap = d3.tree().size([width, height]);
            //const treemap = d3.cluster().size([360, 500]);
            let nodes = d3.hierarchy(healthTree, d => d.children);
            nodes = treemap(nodes);

            // zoom
            function zoomed(event) {
                const {transform} = event;
                svg.attr("transform", transform);
                //svg.attr("stroke-width", 1 / transform.k);
            }

            let zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .on('zoom', zoomed);

            // append the svg object to the plot area
            var svg = d3.select("#plot_tree")
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
                .attr("viewBox", [0, 0, plot_width, plot_height])
                .attr("style", "width: 100%; height: auto; height: intrinsic;").call(zoom)
                //.attr("filter", function(){
                    //if(theme == "dark"){return "url(#backLightDark)";}
                    //return "url(#backLightDark)";
                //})
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // light filter
            //** spec lighting filter **//
            var lightFilterSVG = svg.
            append("filter")
            .attr("id", "specular")
            .attr("primitiveUnits", "objectBoundingBox");

            var feSpecFilterSVG = lightFilterSVG
            .append("feSpecularLighting")
            .attr("result", "specOut")
            .attr("in", "SourceGraphic")
            .attr("lighting-color", "white")
            .attr("surfaceScale", "1")
            .attr("specularExponent", "30")
            .attr("specularConstant", "0.4");


            feSpecFilterSVG
            .append("fePointLight")
            .attr("x", "0.25")
            .attr("y", "0.25")
            .attr("z", "0.3");

            lightFilterSVG
            .append("feComposite")
            .attr("in", "SourceGraphic")
            .attr("in2", "specOut")
            .attr("operator", "arithmetic")
            .attr("k1", "0")
            .attr("k2", "1")
            .attr("k3", "1")
            .attr("k4", "0");
            
            // links
            svg.append("g")
            .selectAll('line.link')
            .data(nodes.links())
            .enter()
            .append('line')
            .attr('x1', function(d) {return d.source.x;})
            .attr('y1', function(d) {return d.source.y;})
            .attr('x2', function(d) {return d.target.x;})
            .attr('y2', function(d) {return d.target.y;})
            .attr('stroke', "lightgray")
            .attr('stroke-width', 2);

            // filter for internal nodes
            const internal_nodes = nodes.descendants().filter(v => v.children);

            svg.append("g")
            .selectAll('circle.node')
            .data(internal_nodes)
            .enter()
            .append('circle')
            .attr("class", "nodeinternal")
            .attr('cx', function(d) {return d.x;})
            .attr('cy', function(d) {return d.y;})
            .attr('r', 12)
            .attr("fill", "var(--mdb-dark)")
            .attr("filter", "url(#specular)")
            .attr('stroke', "var(--mdb-white)")
            .attr("stroke-opacity", 0.5)
            .attr('stroke-width', 4)
            .on("mouseover", function(event, d){
                console.log(d);
                var content = "<div style='letter-spacing:2px'>";
                content = content + "<i class='fas fa-heart-pulse' style='color:salmon; margin-right:5px'></i>";
                content = content + "<strong >HEALTHCARE DOWN UNDER</strong>";
                content = content + "<hr style='margin-top:0px'>" + d.data.description + "<hr>";
                if(d.depth == 2){ // get parent names for depth 2
                    content = content + "<strong>" + d.parent.data.name.toUpperCase() + "</strong>";
                }   
                content = content + "<strong> " + d.data.name.toUpperCase() + "</strong>";
                content = content + "<br><img width='100' src=" + "/images/" + d.data.image + "></div>";
                for(let tip in toolTip){
                    toolTip[tip].setContent(content);
                }
            });
           
            
            
           
            // node names
            svg.append("g")
            .selectAll('title')
            .data(nodes.descendants())
            .enter()
            .append('text')
            //.attr('x', function(d) {return d.x;})
            //.attr('y', function(d) {return d.y;})
            .attr('dy', -20)
            .attr("fill","var(--mdb-dark)")
            .attr("stroke", "var(--mdb-dark)")
            .attr("transform-origin", function(d) {return d.x + " " + d.y})
            .text(function(d) {return d.data.name;})
            .attr("font-size", d => (d.children ? "1.2em" : "1em"))
            .style("text-anchor", "middle")
            .style("letter-spacing","2px")
            .call(getBB);

            // Remove the text elements (for background)
            d3.selectAll("text").remove();

            // add rects (background)
            const xMargin = 5;
            const yMargin = 3;
            svg
            .selectAll("rect")
            .data(nodes.descendants())
            .enter()
            .append("rect")
            .attr("class", d => (d.children ? "internalrect" : "rectleaf"))
            .attr("x", d => d.x - d.bbox.width/2)
            .attr("y", d => d.y - 25)
            .attr("width", d => d.bbox.width + 2 * xMargin)
            .attr("height", d => d.bbox.height + 2 * yMargin)
            .style("fill", "var(--mdb-dark)")
            .style("fill-opacity", 0.8)
            .attr("opacity", d => (d.children ? 1 : 0))
            //.attr("transform-origin", function(d) {return d.x - d.bbox.width/2 + " " + d.y - 20})
            .attr('transform', function(d) {
                return `translate(-${xMargin}, -${d.bbox.height * 0.8 + yMargin})`
                });
            

            // node names
            svg.append("g")
            .selectAll('title')
            .data(nodes.descendants())
            .enter()
            .append('text')
            .attr("class", d => (d.children ? "internaltext" : "leaftext"))
            .attr('x', function(d) {return d.x;})
            .attr('y', function(d) {return d.y;})
            .attr('dy', -25)
            .attr("fill", d => (d.children ? "var(--mdb-white)" : "var(--mdb-dark)"))
            .attr("stroke", d => (d.children ? "var(--mdb-white)" : "var(--mdb-dark)"))
            .attr("font-size", d => (d.children ? "1.2em" : "1em"))
            .attr("transform-origin", function(d) {return d.x + " " + d.y})
            .text(function(d) {return d.data.name;})
            .style("letter-spacing","2px")
            .style("text-anchor", "middle");
            
            
            // rotate leaves and alternate delta
            d3.selectAll(".leaftext").attr("transform", "rotate(30)")
            .attr("dy", function(d,i){
                if(i%2==0){return 30};
                return 30;
            })
            .attr("dx", function(d,i){
                if(i%2==0){return 20};
                return 20;
            })
            .style("text-anchor", "start")
            .style("letter-spacing","");


            // filter for image nodes
            const leaf_nodes = nodes.descendants().filter(v => !v.children);

            // add hearts
            svg.append("g")
            .selectAll('image')
            .data(leaf_nodes)
            .enter()
            .append('image')
            .attr("class", "leaf")
            .attr('x', function(d) {return d.x - 15;})
            .attr('y', function(d) {return d.y;})
            .attr('width', 30)
            .attr('height', 30)
            .attr("filter", "url(#specular)")
            .on("mouseover", function(event, d){
                var content = "<div style='letter-spacing:2px'>";
                content = content + "<i class='fas fa-heart-pulse' style='color:salmon; margin-right:5px'></i>";
                content = content + "<strong >HEALTHCARE DOWN UNDER</strong>";
                content = content + "<hr style='margin-top:0px'>" + d.data.description + "<hr>" + "<strong>" + d.data.name.toUpperCase() + "</strong>";
                for(let tip in toolTipLeaf){
                    toolTipLeaf[tip].setContent(content);
                }
            })
            .attr("href", function(d) {return "/svgs/heart-pulse-fill.svg"})
            .append('animate')
                .attr('attributeName', 'height')
                .attr('from', '30')
                .attr('to','35')
                .attr('dur', '1.5s')
                .attr('begin', '0s')
                .attr('repeatCount', 'indefinite');
            
            
            // filter for image nodes
            const image_nodes = nodes.descendants().filter(v => v.data.image !== "");
            
            // add images
            svg.append("g")
            .selectAll('image')
            .data(image_nodes)
            .enter()
            .append('image')
            .attr('x', function(d) {return d.x - 50;})
            .attr('y', function(d) {return d.y + 30;})
            .attr('width', 100)
            .attr('height', 100)
            //.attr("clip-path", "url(#ellipse-clip)") // clip the rectangle
            .attr("href", function(d) {return "/images/" + d.data.image});

            // get bb of text
            function getBB(selection) {
                selection.each(function(d){d.bbox = this.getBBox();})
            }

        }

        
        function draw_graph(){
            // get width and height of plot area
            var plot_area = document.getElementById("plot_tree");
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // set the dimensions and margins of the graph
            var margin = {top: 0, right: 0, bottom: 0, left: 0};
            forceWidth = plot_width - margin.left - margin.right;
            forceHeight = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // append the svg object to the plot area
            svg = d3.select("#plot_tree")
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
                //.attr("filter", function(){
                    //if(theme == "dark"){return "url(#backLightDark)";}
                    //return "url(#backLightDark)";
                //})
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");
                

            // simulation constraints
            var simEdge = 0;
            var radius = 20;
            simulation = d3.forceSimulation().alpha(1).alphaDecay(0.1).velocityDecay(0.4)
            .force("link", d3.forceLink().strength(2).id(function(d) { return d.id; }))
            //.force("charge", d3.forceManyBody())  // force boundary below is a plugin
            //.force("boundary", forceBoundary(simEdge, simEdge, forceWidth-simEdge, forceHeight+simEdge).strength(0.005))
            .force("collide", d3.forceCollide().radius(function(d){
                return radius;
            }))
            .force("center", d3.forceCenter(forceWidth / 2, forceHeight / 2));

             // simulation link and nodes
             simulation
            .nodes(healthTree.nodes)
            .on("tick", ticked);

            simulation.force("link")
                .links(healthTree.links)
                .distance(function(d){
                        return 260;
                });

            // add links
            var link = svg.append("g")
            .selectAll("line")
            .data(healthTree.links)
            .enter().append("line")
            .attr("class", "links")
            .attr("stroke-width", 5)
            .style("stroke-opacity", 0.3)
            .attr("fill", "none")
            .attr("stroke", function(d){
                return "black";
            })
            .style("opacity", 1);

            // add nodes
            var node = svg.append("g")
            .selectAll("circle")
            .data(healthTree.nodes)
            .enter().append("circle")
            .attr("class", "nodes")
            .attr("r", "1em")
            //.attr("filter", function(d){
                //if(d.nodeType != 2){return "url(#specular)"}
                //return "url(#specular)";
            //})
            .attr("fill", function(d){
                //
                return "black";
               //
                
            })
            .attr("stroke", function(d){
                return "whitesmoke";
                
            })
            .attr("stroke-width", 5)
            .style("stroke-opacity", function(d){
               return 0.5;
            })
            .style("fill-opacity", function(d){
               
                return 1;
            })
            .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));


            // add text (description)
            svg.append("g")
            .selectAll("descriptors")
            .data(healthTree.nodes)
            .enter().append("text")
            .attr("class", "names label-force")
            .text(function(d){
                return d.title;
            })
            .attr("fill", function(){
                return "var(--mdb-dark)";
            })
            .attr("stroke", function(){
                return "var(--mdb-dark)";
            })
            .style("text-anchor", "middle")
            .style("font-size", "1.2rem")
            .attr('dy', -32)
            .call(getBB);

            // Remove the text elements
            d3.selectAll("text").remove();

            // add rects
            const xMargin = 4
            const yMargin = 2
            svg
            .selectAll("rect")
            .data(healthTree.nodes)
            .enter()
            .append("rect")
            //.attr("x", d => projection(d.location)[0] + 10)
            //.attr("y", d => projection(d.location)[1])
            .attr("width", d => d.bbox.width + 2 * xMargin)
            .attr("height", d => d.bbox.height + 2 * yMargin)
            .style("fill", "var(--mdb-dark)")
            .style("fill-opacity", 0.5)
            .attr('transform', function(d) {
                return `translate(-${xMargin}, -${d.bbox.height * 0.8 + yMargin})`
                });

            // re add text
            var title = svg.append("g")
                .selectAll("descriptors")
                .data(healthTree.nodes)
                .enter().append("text")
                .attr("class", "names label-force")
                .text(function(d){
                    return d.title;
                })
                .attr("fill", function(){
                    return "var(--mdb-white)";
                })
                .attr("stroke", function(){
                    return "var(--mdb-white)";
                })
                .style("text-anchor", "middle")
                .style("font-size", "1.2rem")
                .attr('dy', -32);
                
            
            // get bb of text
            function getBB(selection) {
                selection.each(function(d){d.bbox = this.getBBox();})
            }
            
            // function to wrap text
            function wrap(text, width) {
                text.each(function() {
                    var text = d3.select(this),
                        words = text.text().split(/\s+/).reverse(),
                        word,
                        line = [],
                        lineNumber = 0,
                        lineHeight = 16, //1.1, // ems
                        x = text.attr("x"),
                        y = text.attr("y"),
                        dy = text.attr("dy"), //parseFloat(text.attr("dy")),
                        tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy);
                    while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(" "));
                    if (tspan.node().getComputedTextLength() > width) {
                        line.pop();
                        tspan.text(line.join(" "));
                        line = [word];
                        tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy).text(word);
                    }
                    }
                });
            }

            // ticked function
            function ticked() {
                link
                    .attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });
            
                node
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });

                title
                .attr("x",  d => d.x)
                .attr("y", d => d.y);
                
                d3.selectAll("tspan")
                .attr("x",  d => d.x)
                .attr("y", d => d.y);

                d3.selectAll("rect")
                .attr("x",  d => d.x + d.bbox.x)
                .attr("y", d => d.y - 32);


                //desc
                //.attr("x",  d => d.x)
                //.attr("y", d => d.y);

            }

            // drage functions
            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }
            
            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }
            
            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }
        
        }


    </script>
</head>